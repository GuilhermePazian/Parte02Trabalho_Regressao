s <- lms$sigma
r <- resid(lms)
ts <- r/(s*sqrt(1-h))
di <- (1/p)*(h/(1-h))*(ts^2)
si <- lm.influence(fit.model)$sigma
tsi <- r/(si*sqrt(1-h))
a <- max(tsi)
b <- min(tsi)
par(mfrow=c(1,2))
plot(h,xlab="Índice", ylab="Medida h", pch=16, ylim=c(0,1),cex=1.1,cex.axis=1.1,cex.lab=1.1)
cut <- 2*p/n
abline(cut,0,lty=2)
#identify(h, n=1)
#title(sub="(a)")
#
plot(di,xlab="Índice", ylab="Distância de Cook", pch=16,cex=1.1,cex.axis=1.1,cex.lab=1.1)
#identify(di, n=2)
#
#------------------------------------------------------------#
}
diag2norm<-function(fit.model){
# fit.model: objeto com o ajuste do modelo normal linear homocedástico
# obtido através da função "lm"
par(mfrow=c(2,2))
X <- model.matrix(fit.model)
n <- nrow(X)
p <- ncol(X)
H <- X%*%solve(t(X)%*%X)%*%t(X)
h <- diag(H)
lms <- summary(fit.model)
s <- lms$sigma
r <- resid(lms)
ts <- r/(s*sqrt(1-h))
di <- (1/p)*(h/(1-h))*(ts^2)
si <- lm.influence(fit.model)$sigma
tsi <- r/(si*sqrt(1-h))
a <- max(tsi)
b <- min(tsi)
par(mfrow=c(2,2))
#
plot(tsi,xlab="Índice", ylab="Resíduo Studentizado",
ylim=c(b-1,a+1), pch=16,cex=1.1,cex.axis=1.1,cex.lab=1.1)
abline(2,0,lty=2)
abline(-2,0,lty=2)
abline(0,0,lty=2)
#identify(tsi, n=1)
#title(sub="(c)")
#
plot(fitted(fit.model),tsi,xlab="Valores Ajustados",
ylab="Resíduo Studentizado", ylim=c(b-1,a+1), pch=16,cex=1.1,cex.axis=1.1,cex.lab=1.1)
#
abline(2,0,lty=2)
abline(-2,0,lty=2)
abline(0,0,lty=2)
#boxplot(tsi,ylab="Resíduo Studentizado",cex=1.1,cex.axis=1.1,cex.lab=1.1)
hist(tsi,xlab="Resíduo Studentizado",ylab="densidade",probability=TRUE,main="",cex=1.1,cex.axis=1.1,cex.lab=1.1)
#title(sub="(d)")
#identify(fitted(fit.model),tsi, n=1)
#
boxplot(tsi,ylab="Resíduo Studentizado",cex=1.1,cex.axis=1.1,cex.lab=1.1)
#---------------------------------------------------------------#
}
diag2norm(fitmax)
diagnorm(fitmax)
diagnorm<-function(fit.model){
# fit.model: objeto com o ajuste do modelo normal linear homocedástico
# obtido através da função "lm"
par(mfrow=c(2,2))
X <- model.matrix(fit.model)
n <- nrow(X)
p <- ncol(X)
H <- X%*%solve(t(X)%*%X)%*%t(X)
h <- diag(H)
lms <- summary(fit.model)
s <- lms$sigma
r <- resid(lms)
ts <- r/(s*sqrt(1-h))
di <- (1/p)*(h/(1-h))*(ts^2)
si <- lm.influence(fit.model)$sigma
tsi <- r/(si*sqrt(1-h))
a <- max(tsi)
b <- min(tsi)
par(mfrow=c(2,2))
#
plot(tsi,xlab="Índice", ylab="Resíduo Studentizado",
ylim=c(b-1,a+1), pch=16,cex=1.1,cex.axis=1.1,cex.lab=1.1)
abline(2,0,lty=2)
abline(-2,0,lty=2)
abline(0,0,lty=2)
#identify(tsi, n=1)
#title(sub="(c)")
#
plot(fitted(fit.model),tsi,xlab="Valores Ajustados",
ylab="Resíduo Studentizado", ylim=c(b-1,a+1), pch=16,cex=1.1,cex.axis=1.1,cex.lab=1.1)
#
abline(2,0,lty=2)
abline(-2,0,lty=2)
abline(0,0,lty=2)
#boxplot(tsi,ylab="Resíduo Studentizado",cex=1.1,cex.axis=1.1,cex.lab=1.1)
hist(tsi,xlab="Resíduo Studentizado",ylab="densidade",probability=TRUE,main="",cex=1.1,cex.axis=1.1,cex.lab=1.1)
#title(sub="(d)")
#identify(fitted(fit.model),tsi, n=1)
#
ident <- diag(n)
epsilon <- matrix(0,n,100)
e <- matrix(0,n,100)
e1 <- numeric(n)
e2 <- numeric(n)
#
for(i in 1:100){
epsilon[,i] <- rnorm(n,0,1)
e[,i] <- (ident - H)%*%epsilon[,i]
u <- diag(ident - H)
e[,i] <- e[,i]/sqrt(u)
e[,i] <- sort(e[,i]) }
#
for(i in 1:n){
eo <- sort(e[i,])
e1[i] <- (eo[2]+eo[3])/2
e2[i] <- (eo[97]+eo[98])/2 }
#
med <- apply(e,1,mean)
faixa <- range(tsi,e1,e2)
#
#par(pty="s")
qqnorm(tsi,xlab="Percentil da N(0,1)",
ylab="Resíduo Studentizado", ylim=faixa, pch=16, main="",cex=1.1,cex.axis=1.1,cex.lab=1.1)
par(new=T)
qqnorm(e1,axes=F,xlab="",ylab="",type="l",ylim=faixa,lty=1, main="")
par(new=T)
qqnorm(e2,axes=F,xlab="",ylab="", type="l",ylim=faixa,lty=1, main="")
par(new=T)
qqnorm(med,axes=F,xlab="",ylab="",type="l",ylim=faixa,lty=2, main="")
#---------------------------------------------------------------#
}
diagnorm(fitmax)
#echo = FALSE não permite que o chunk apareça no pdf
#Função que produz os quatro gráficos para a análise de resíduos
diag2norm<-function(fit.model){
# fit.model: objeto com o ajuste do modelo normal linear homocedástico
# obtido através da função "lm"
par(mfrow=c(2,2))
X <- model.matrix(fit.model)
n <- nrow(X)
p <- ncol(X)
H <- X%*%solve(t(X)%*%X)%*%t(X)
h <- diag(H)
lms <- summary(fit.model)
s <- lms$sigma
r <- resid(lms)
ts <- r/(s*sqrt(1-h))
di <- (1/p)*(h/(1-h))*(ts^2)
si <- lm.influence(fit.model)$sigma
tsi <- r/(si*sqrt(1-h))
a <- max(tsi)
b <- min(tsi)
par(mfrow=c(2,2))
#
plot(tsi,xlab="Índice", ylab="Resíduo Studentizado",
ylim=c(b-1,a+1), pch=16,cex=1.1,cex.axis=1.1,cex.lab=1.1)
abline(2,0,lty=2)
abline(-2,0,lty=2)
abline(0,0,lty=2)
#identify(tsi, n=1)
#title(sub="(c)")
#
plot(fitted(fit.model),tsi,xlab="Valores Ajustados",
ylab="Resíduo Studentizado", ylim=c(b-1,a+1), pch=16,cex=1.1,cex.axis=1.1,cex.lab=1.1)
#
abline(2,0,lty=2)
abline(-2,0,lty=2)
abline(0,0,lty=2)
#boxplot(tsi,ylab="Resíduo Studentizado",cex=1.1,cex.axis=1.1,cex.lab=1.1)
hist(tsi,xlab="Resíduo Studentizado",ylab="densidade",probability=TRUE,main="",cex=1.1,cex.axis=1.1,cex.lab=1.1)
#title(sub="(d)")
#identify(fitted(fit.model),tsi, n=1)
#
boxplot(tsi,ylab="Resíduo Studentizado",cex=1.1,cex.axis=1.1,cex.lab=1.1)
#---------------------------------------------------------------#
}
#função para fazer o gráfico de envelopes
envelnorm<-function(fit.model){
# fit.model: objeto com o ajuste do modelo normal linear homocedástico
# obtido através da função "lm"
#par(mfrow=c(1,1))
X <- model.matrix(fit.model)
n <- nrow(X)
p <- ncol(X)
H <- X%*%solve(t(X)%*%X)%*%t(X)
h <- diag(H)
si <- lm.influence(fit.model)$sigma
r <- resid(fit.model)
tsi <- r/(si*sqrt(1-h))
#
ident <- diag(n)
epsilon <- matrix(0,n,100)
e <- matrix(0,n,100)
e1 <- numeric(n)
e2 <- numeric(n)
#
for(i in 1:100){
epsilon[,i] <- rnorm(n,0,1)
e[,i] <- (ident - H)%*%epsilon[,i]
u <- diag(ident - H)
e[,i] <- e[,i]/sqrt(u)
e[,i] <- sort(e[,i]) }
#
for(i in 1:n){
eo <- sort(e[i,])
e1[i] <- (eo[2]+eo[3])/2
e2[i] <- (eo[97]+eo[98])/2 }
#
med <- apply(e,1,mean)
faixa <- range(tsi,e1,e2)
#
#par(pty="s")
qqnorm(tsi,xlab="Percentil da N(0,1)",
ylab="Residuo Studentizado", ylim=faixa, pch=16, main="",cex=1.1,cex.axis=1.1,cex.lab=1.1)
par(new=T)
qqnorm(e1,axes=F,xlab="",ylab="",type="l",ylim=faixa,lty=1, main="")
par(new=T)
qqnorm(e2,axes=F,xlab="",ylab="", type="l",ylim=faixa,lty=1, main="")
par(new=T)
qqnorm(med,axes=F,xlab="",ylab="",type="l",ylim=faixa,lty=2, main="")
#------------------------------------------------------------#
}
#função para "medidas de influência e alavancagem"
anainflu_norm<-function(fit.model){
# fit.model: objeto com o ajuste do modelo normal linear homocedástico
# obtido através da função "lm"
X <- model.matrix(fit.model)
n <- nrow(X)
p <- ncol(X)
H <- X%*%solve(t(X)%*%X)%*%t(X)
h <- diag(H)
lms <- summary(fit.model)
s <- lms$sigma
r <- resid(lms)
ts <- r/(s*sqrt(1-h))
di <- (1/p)*(h/(1-h))*(ts^2)
si <- lm.influence(fit.model)$sigma
tsi <- r/(si*sqrt(1-h))
a <- max(tsi)
b <- min(tsi)
par(mfrow=c(1,2))
plot(h,xlab="Índice", ylab="Medida h", pch=16, ylim=c(0,1),cex=1.1,cex.axis=1.1,cex.lab=1.1)
cut <- 2*p/n
abline(cut,0,lty=2)
#identify(h, n=1)
#title(sub="(a)")
#
plot(di,xlab="Índice", ylab="Distância de Cook", pch=16,cex=1.1,cex.axis=1.1,cex.lab=1.1)
#identify(di, n=2)
#
#------------------------------------------------------------#
}
#echo = FALSE não permite que o chunk apareça no pdf
library(tidyverse)
library(dplyr)
#leitura dos dados
dados = read.table("http://www.ime.unicamp.br/~cnaber/reg3.dat")
names(dados)=c("Estado","pop","percap","analf","expvida","crime","estud","ndias","area")
#criação variável dens
dados = dados %>% mutate(dens=pop/area)
#seleção das variáveis segundo orientação do Caio
dados = dados %>% select(percap, analf, crime, estud, ndias,dens,expvida)
#echo = FALSE não permite que o chunk apareça no pdf
library(plyr)
library(reshape2)
library(printr)
#manipulação dos dados
estat_desc <- dados
estat_desc$Estado = NULL
df <- melt(estat_desc, id.vars = 0)
#tabela resumo
resumo <- ddply(df, c("variable"), function(x) summary(x$value))
#arredondando os valores !!! tentar arredondar os decimais porem manter os discretos com somente o valor!!!
resumo[,2:ncol(resumo)] <- round(resumo[,2:ncol(resumo)],4)
resumo
#echo = FALSE não permite que o chunk apareça no pdf
# !!!acho que boxplots não são nescessários neste caso, já que temos todas as variáveis contínuas (ou discretas), ou seja, nenhum fator!!!
#boxplots
ggplot(df, aes(x = variable, y =  value)) +
geom_boxplot() +
facet_wrap(~variable, scales = "free") +  theme_bw()
#echo = FALSE não permite que o chunk apareça no pdf
#gráficos de dispersão
dispersao <- melt(estat_desc, id.vars = 7)
ggplot(dispersao, aes(x = value, y =  expvida)) +
geom_point() +
facet_wrap(~variable, scales = "free") +  theme_bw()
#echo = FALSE não permite que o chunk apareça no pdf
#Padronizacao dos dados
dados[,c(1:ncol(dados))] =  sapply(dados[,c(1:ncol(dados))], function(x) (x-mean(x))/sd(x))
#modelo padronizado completo
fitmax <- lm(expvida~percap+analf+crime+estud+ndias+dens,data=dados)
summary(fitmax)
#modelo padronizado só com o intercepto
fitmin <- lm(expvida~1,data = dados)
summary(fitmin)
#echo = FALSE não permite que o chunk apareça no pdf
#Padronizacao dos dados
dados[,c(1:ncol(dados))] =  sapply(dados[,c(1:ncol(dados))], function(x) (x-mean(x))/sd(x))
#eval= FALSE faz com que o R ignore este chunk
#echo = FALSE não permite que o chunk apareça no pdf
pacotes = c("tidyverse","dplyr","plyr","reshape2")
install.packages(pacotes)
#echo = FALSE não permite que o chunk apareça no pdf
#Função que produz os quatro gráficos para a análise de resíduos
diag2norm<-function(fit.model){
# fit.model: objeto com o ajuste do modelo normal linear homocedástico
# obtido através da função "lm"
par(mfrow=c(2,2))
X <- model.matrix(fit.model)
n <- nrow(X)
p <- ncol(X)
H <- X%*%solve(t(X)%*%X)%*%t(X)
h <- diag(H)
lms <- summary(fit.model)
s <- lms$sigma
r <- resid(lms)
ts <- r/(s*sqrt(1-h))
di <- (1/p)*(h/(1-h))*(ts^2)
si <- lm.influence(fit.model)$sigma
tsi <- r/(si*sqrt(1-h))
a <- max(tsi)
b <- min(tsi)
par(mfrow=c(2,2))
#
plot(tsi,xlab="Índice", ylab="Resíduo Studentizado",
ylim=c(b-1,a+1), pch=16,cex=1.1,cex.axis=1.1,cex.lab=1.1)
abline(2,0,lty=2)
abline(-2,0,lty=2)
abline(0,0,lty=2)
#identify(tsi, n=1)
#title(sub="(c)")
#
plot(fitted(fit.model),tsi,xlab="Valores Ajustados",
ylab="Resíduo Studentizado", ylim=c(b-1,a+1), pch=16,cex=1.1,cex.axis=1.1,cex.lab=1.1)
#
abline(2,0,lty=2)
abline(-2,0,lty=2)
abline(0,0,lty=2)
#boxplot(tsi,ylab="Resíduo Studentizado",cex=1.1,cex.axis=1.1,cex.lab=1.1)
hist(tsi,xlab="Resíduo Studentizado",ylab="densidade",probability=TRUE,main="",cex=1.1,cex.axis=1.1,cex.lab=1.1)
#title(sub="(d)")
#identify(fitted(fit.model),tsi, n=1)
#
boxplot(tsi,ylab="Resíduo Studentizado",cex=1.1,cex.axis=1.1,cex.lab=1.1)
#---------------------------------------------------------------#
}
#função para fazer o gráfico de envelopes
envelnorm<-function(fit.model){
# fit.model: objeto com o ajuste do modelo normal linear homocedástico
# obtido através da função "lm"
#par(mfrow=c(1,1))
X <- model.matrix(fit.model)
n <- nrow(X)
p <- ncol(X)
H <- X%*%solve(t(X)%*%X)%*%t(X)
h <- diag(H)
si <- lm.influence(fit.model)$sigma
r <- resid(fit.model)
tsi <- r/(si*sqrt(1-h))
#
ident <- diag(n)
epsilon <- matrix(0,n,100)
e <- matrix(0,n,100)
e1 <- numeric(n)
e2 <- numeric(n)
#
for(i in 1:100){
epsilon[,i] <- rnorm(n,0,1)
e[,i] <- (ident - H)%*%epsilon[,i]
u <- diag(ident - H)
e[,i] <- e[,i]/sqrt(u)
e[,i] <- sort(e[,i]) }
#
for(i in 1:n){
eo <- sort(e[i,])
e1[i] <- (eo[2]+eo[3])/2
e2[i] <- (eo[97]+eo[98])/2 }
#
med <- apply(e,1,mean)
faixa <- range(tsi,e1,e2)
#
#par(pty="s")
qqnorm(tsi,xlab="Percentil da N(0,1)",
ylab="Residuo Studentizado", ylim=faixa, pch=16, main="",cex=1.1,cex.axis=1.1,cex.lab=1.1)
par(new=T)
qqnorm(e1,axes=F,xlab="",ylab="",type="l",ylim=faixa,lty=1, main="")
par(new=T)
qqnorm(e2,axes=F,xlab="",ylab="", type="l",ylim=faixa,lty=1, main="")
par(new=T)
qqnorm(med,axes=F,xlab="",ylab="",type="l",ylim=faixa,lty=2, main="")
#------------------------------------------------------------#
}
#função para "medidas de influência e alavancagem"
anainflu_norm<-function(fit.model){
# fit.model: objeto com o ajuste do modelo normal linear homocedástico
# obtido através da função "lm"
X <- model.matrix(fit.model)
n <- nrow(X)
p <- ncol(X)
H <- X%*%solve(t(X)%*%X)%*%t(X)
h <- diag(H)
lms <- summary(fit.model)
s <- lms$sigma
r <- resid(lms)
ts <- r/(s*sqrt(1-h))
di <- (1/p)*(h/(1-h))*(ts^2)
si <- lm.influence(fit.model)$sigma
tsi <- r/(si*sqrt(1-h))
a <- max(tsi)
b <- min(tsi)
par(mfrow=c(1,2))
plot(h,xlab="Índice", ylab="Medida h", pch=16, ylim=c(0,1),cex=1.1,cex.axis=1.1,cex.lab=1.1)
cut <- 2*p/n
abline(cut,0,lty=2)
#identify(h, n=1)
#title(sub="(a)")
#
plot(di,xlab="Índice", ylab="Distância de Cook", pch=16,cex=1.1,cex.axis=1.1,cex.lab=1.1)
#identify(di, n=2)
#
#------------------------------------------------------------#
}
#echo = FALSE não permite que o chunk apareça no pdf
library(tidyverse)
library(dplyr)
#leitura dos dados
dados = read.table("http://www.ime.unicamp.br/~cnaber/reg3.dat")
names(dados)=c("Estado","pop","percap","analf","expvida","crime","estud","ndias","area")
#criação variável dens
dados = dados %>% mutate(dens=pop/area)
#seleção das variáveis segundo orientação do Caio
dados = dados %>% select(percap, analf, crime, estud, ndias,dens,expvida)
#echo = FALSE não permite que o chunk apareça no pdf
library(plyr)
library(reshape2)
library(printr)
#manipulação dos dados
estat_desc <- dados
estat_desc$Estado = NULL
df <- melt(estat_desc, id.vars = 0)
#tabela resumo
resumo <- ddply(df, c("variable"), function(x) summary(x$value))
#arredondando os valores !!! tentar arredondar os decimais porem manter os discretos com somente o valor!!!
resumo[,2:ncol(resumo)] <- round(resumo[,2:ncol(resumo)],4)
resumo
#echo = FALSE não permite que o chunk apareça no pdf
library(tidyverse)
library(dplyr)
#leitura dos dados
dados = read.table("http://www.ime.unicamp.br/~cnaber/reg3.dat")
names(dados)=c("Estado","pop","percap","analf","expvida","crime","estud","ndias","area")
#criação variável dens
dados = dados %>% mutate(dens=pop/area)
#seleção das variáveis segundo orientação do Caio
dados = dados %>% select(percap, analf, crime, estud, ndias,dens,expvida)
#echo = FALSE não permite que o chunk apareça no pdf
library(plyr)
library(tidyverse)
library(dplyr)
#leitura dos dados
dados = read.table("http://www.ime.unicamp.br/~cnaber/reg3.dat")
names(dados)=c("Estado","pop","percap","analf","expvida","crime","estud","ndias","area")
#criação variável dens
dados = dados %>% mutate(dens=pop/area)
#seleção das variáveis segundo orientação do Caio
dados = dados %>% select(percap, analf, crime, estud, ndias,dens,expvida)
#echo = FALSE não permite que o chunk apareça no pdf
library(reshape2)
library(printr)
#manipulação dos dados
estat_desc <- dados
estat_desc$Estado = NULL
df <- melt(estat_desc, id.vars = 0)
#tabela resumo
resumo <- ddply(df, c("variable"), function(x) summary(x$value))
#arredondando os valores !!! tentar arredondar os decimais porem manter os discretos com somente o valor!!!
resumo[,2:ncol(resumo)] <- round(resumo[,2:ncol(resumo)],4)
resumo
#echo = FALSE não permite que o chunk apareça no pdf
# !!!acho que boxplots não são nescessários neste caso, já que temos todas as variáveis contínuas (ou discretas), ou seja, nenhum fator!!!
#boxplots
ggplot(df, aes(x = variable, y =  value)) +
geom_boxplot() +
facet_wrap(~variable, scales = "free") +  theme_bw()
#echo = FALSE não permite que o chunk apareça no pdf
#gráficos de dispersão
dispersao <- melt(estat_desc, id.vars = 7)
ggplot(dispersao, aes(x = value, y =  expvida)) +
geom_point() +
facet_wrap(~variable, scales = "free") +  theme_bw()
#echo = FALSE não permite que o chunk apareça no pdf
#Padronizacao dos dados
dados[,c(1:ncol(dados))] =  sapply(dados[,c(1:ncol(dados))], function(x) (x-mean(x))/sd(x))
#modelo padronizado completo
fitmax <- lm(expvida~percap+analf+crime+estud+ndias+dens,data=dados)
summary(fitmax)
#modelo padronizado só com o intercepto
fitmin <- lm(expvida~1,data = dados)
summary(fitmin)
summary(fitmin)
View(dados)
#echo = FALSE não permite que o chunk apareça no pdf
#gráficos de dispersão
dispersao <- melt(estat_desc, id.vars = 7)
ggplot(dispersao, aes(x = value, y =  expvida)) +
geom_point() +
facet_wrap(~variable, scales = "free") +  theme_bw()
